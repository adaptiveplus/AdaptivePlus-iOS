// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdaptivePlus
@_exported import AdaptivePlus
import CoreGraphics
import CoreLocation
import CoreTelephony
import CoreText
import Foundation
import MessageUI
import Photos
import SDWebImage
import SQLite3
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public enum APLanguage {
  case en
  case ru
  case kz
  case `default`
  public static func == (a: APLanguage, b: APLanguage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol APViewDelegate : AnyObject {
  func apViewDidUpdateContent(view: APView)
  func apViewDidTriggerCustomAction(view: APView, name: Swift.String, parameters: [Swift.String : Any])
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class APView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: APViewDelegate?
  @_Concurrency.MainActor(unsafe) public var publicationPageKey: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) convenience public init(publicationPageKey: Swift.String)
  @objc deinit
}
extension APView {
  @_Concurrency.MainActor(unsafe) public func reload()
  @_Concurrency.MainActor(unsafe) public func scrollToStart()
}
public protocol APViewlessDelegate : AnyObject {
  func apViewlessDidFinish(viewless: APViewless)
  func apViewlessDidTriggerCustomAction(name: Swift.String, parameters: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class APViewless {
  weak public var delegate: APViewlessDelegate?
  public var publicationPageKey: Swift.String {
    get
  }
  convenience public init(publicationPageKey: Swift.String)
  public func preloadContents()
  public func show()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AdaptivePlus {
  public static func initialize(settings: AdaptivePlusSettings, verbose: Swift.Bool = false)
  public static func showSplashScreen(user: AdaptivePlusUser? = nil, hasDrafts: Swift.Bool = false, customActionTriggered: ((_ name: Swift.String, _ parameters: [Swift.String : Any]) -> Swift.Void)? = nil, finished: (() -> Swift.Void)? = nil)
  public static func start(user: AdaptivePlusUser? = nil, completion: ((_ started: Swift.Bool) -> Swift.Void)? = nil)
  public static func set(language: APLanguage)
  public static func getAuthorizationToken() -> Swift.String
  @objc deinit
}
public class AdaptivePlusSettings : Swift.Codable {
  public init(url: Swift.String, clientId: Swift.String, clientSecret: Swift.String, apiKey: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension AdaptivePlusSettings : Swift.Equatable {
  public static func == (lhs: AdaptivePlusSettings, rhs: AdaptivePlusSettings) -> Swift.Bool
}
public class AdaptivePlusUser : Swift.Codable {
  public enum Gender : Swift.String {
    case male
    case female
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(userId: Swift.String? = nil, gender: AdaptivePlusUser.Gender? = nil, age: Swift.Int? = nil, userCoordinate: CoreLocation.CLLocationCoordinate2D? = nil, properties: [Swift.String : Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension AdaptivePlusUser : Swift.Equatable {
  public static func == (lhs: AdaptivePlusUser, rhs: AdaptivePlusUser) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layoutAttributesClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension APLanguage : Swift.Equatable {}
extension APLanguage : Swift.Hashable {}
extension AdaptivePlusUser.Gender : Swift.Equatable {}
extension AdaptivePlusUser.Gender : Swift.Hashable {}
extension AdaptivePlusUser.Gender : Swift.RawRepresentable {}
