// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdaptivePlus
import AVFoundation
import AVKit
@_exported import AdaptivePlus
import CoreGraphics
import CoreLocation
import Foundation
import Photos
import SDWebImage
import SQLite3
import SafariServices
import Swift
import UIKit
public enum APError : Swift.Error, Swift.CustomStringConvertible {
  case invalidImageURL
  case downloadError
  public var description: Swift.String {
    get
  }
  public static func == (a: APError, b: APError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum APResult<V, E> {
  case success(V)
  case failure(E)
}
public protocol APViewDelegate : AnyObject {
  func contentUpdated(view: APView)
  func customActionTriggered(_ action: CustomAction)
}
@objc @_hasMissingDesignatedInitializers final public class APView : UIKit.UIView {
  weak final public var delegate: APViewDelegate?
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension APView {
  final public func reloadView()
}
extension APView : SafariServices.SFSafariViewControllerDelegate {
  @objc final public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
public struct APViewSettings {
  public init(id: Swift.String, showBookmarks: Swift.Bool = false)
}
public struct CustomAction {
  public typealias Parameters = [Swift.String : Any]
  public let parameters: CustomAction.Parameters
  public var name: Swift.String {
    get
  }
}
public enum AdaptiveLanguage {
  case en
  case ru
  case kz
  case `default`
  public static func == (a: AdaptiveLanguage, b: AdaptiveLanguage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers final public class AdaptivePlus {
  public static let instance: AdaptivePlus
  @objc deinit
}
extension AdaptivePlus {
  final public func initialize(settings: AdaptiveSettings, verbose: Swift.Bool = false)
  final public func start(properties: AdaptiveUserProperties, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  final public func stop()
  final public func createAPView(with settings: APViewSettings) -> APView
  final public func set(language: AdaptiveLanguage)
  final public func set(ip: Swift.String?)
  final public func set(coordinate: CoreLocation.CLLocationCoordinate2D?)
  final public func removeCachedData()
  final public func preloadContents(of tag: Swift.String)
  final public func showStory(by tag: Swift.String, completion: @escaping () -> Swift.Void)
}
public class AdaptiveSettings : Swift.Codable {
  public init(url: Swift.String, companySecret: Swift.String, appSecret: Swift.String, appId: Swift.String)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum AdaptiveGender : Swift.String, Swift.Codable {
  case male
  case female
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public class AdaptiveUserProperties : Swift.Codable {
  public init(userId: Swift.String? = nil, gender: AdaptiveGender? = nil, age: Swift.Int? = nil)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers open class AnimatedCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @objc override dynamic open class var layoutAttributesClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic open func prepare(forAnimatedBoundsChange oldBounds: CoreGraphics.CGRect)
  @objc override dynamic open func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @objc override dynamic open func finalizeAnimatedBoundsChange()
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class AnimatedCollectionViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  public var contentView: UIKit.UIView?
  public var scrollDirection: UIKit.UICollectionView.ScrollDirection
  public var startOffset: CoreGraphics.CGFloat
  public var middleOffset: CoreGraphics.CGFloat
  public var endOffset: CoreGraphics.CGFloat
  @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension KeyedDecodingContainer {
  public func decode(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]
  public func decodeIfPresent(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]?
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]?
}
extension KeyedEncodingContainer {
  public mutating func encode(_ value: [Swift.String : Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encode(_ value: [Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Swift.String : Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
public protocol Diffable {
  var diffIdentifier: Swift.AnyHashable { get }
}
extension Int : Diffable {
  public var diffIdentifier: Swift.AnyHashable {
    get
  }
}
public enum ListDiffable {
  public struct MoveIndex : Swift.Equatable {
    public let from: Swift.Int
    public let to: Swift.Int
    public init(from: Swift.Int, to: Swift.Int)
    public static func == (lhs: ListDiffable.MoveIndex, rhs: ListDiffable.MoveIndex) -> Swift.Bool
  }
  public struct Result {
    public var inserts: Foundation.IndexSet
    public var updates: Foundation.IndexSet
    public var deletes: Foundation.IndexSet
    public var moves: [ListDiffable.MoveIndex]
    public var oldMap: [Swift.AnyHashable : Swift.Int]
    public var newMap: [Swift.AnyHashable : Swift.Int]
    public var hasChanges: Swift.Bool {
      get
    }
    public var changeCount: Swift.Int {
      get
    }
    public func validate(_ oldArray: Swift.Array<Diffable>, _ newArray: Swift.Array<Diffable>) -> Swift.Bool
    public func oldIndexFor(identifier: Swift.AnyHashable) -> Swift.Int?
    public func newIndexFor(identifier: Swift.AnyHashable) -> Swift.Int?
  }
  public static func diffing<T>(oldArray: Swift.Array<T>, newArray: Swift.Array<T>) -> ListDiffable.Result where T : Diffable, T : Swift.Equatable
}
extension ListDiffable.Result {
  public func forBatchUpdates() -> ListDiffable.Result
}
extension NSNotification.Name {
  public static let adaptiveReloadViews: Foundation.Notification.Name
  public static let adaptiveHideViews: Foundation.Notification.Name
  public static let adaptiveStoryPreviewDidShowModalVC: Foundation.Notification.Name
  public static let adaptiveStoryPreviewDidCloseModalVC: Foundation.Notification.Name
}
public enum LayoutType {
  case cubic
  public static func == (a: LayoutType, b: LayoutType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UIButton {
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
}
extension UIFont {
  public static let loadFonts: ()
}
extension UITabBarController {
  @objc dynamic public var childViewControllerForDeck: UIKit.UIViewController? {
    @objc get
  }
}
extension UINavigationController {
  @objc dynamic public var childViewControllerForDeck: UIKit.UIViewController? {
    @objc get
  }
}
extension APError : Swift.Equatable {}
extension APError : Swift.Hashable {}
extension AdaptiveLanguage : Swift.Equatable {}
extension AdaptiveLanguage : Swift.Hashable {}
extension AdaptiveGender : Swift.Equatable {}
extension AdaptiveGender : Swift.Hashable {}
extension AdaptiveGender : Swift.RawRepresentable {}
extension LayoutType : Swift.Equatable {}
extension LayoutType : Swift.Hashable {}
